1. Analyze Bit Error Rate (BER) performance for BPSK signals over AWGN. Compare the results with theoretical results

m = 10^5; % Number of bits per frame
snr_DB = 0:1:10; % SNR range in dB

for j = 1:length(snr_DB)
  n_err = 0;
  n_bits = 0;
  while n_err < 100
    % Generate a random sequence of length m
    inf_bits = round(rand(1, m)); 

    % BPSK modulator
    x = 2 * (inf_bits - 0.5);

    % Noise variance
    N0 = 1 / 10^(snr_DB(j) / 10);

    % Send over Gaussian link to the receiver
    y = x + sqrt(N0 / 2) * randn(1, length(x));

    % Decision-making at the receiver
    est_bits = y > 0;

    % Calculate bit errors
    diff = inf_bits - est_bits;
    n_err = n_err + sum(abs(diff));
    n_bits = n_bits + length(inf_bits);
  end

  % Calculate Bit Error Rate
  BER(j) = n_err / n_bits;
end

% AWGN Theoretical BER
theoryBerAWGN = 0.5 * erfc(sqrt(10.^(snr_DB / 10)));

% Plot results
semilogy(snr_DB, BER, 'or', 'LineWidth', 2);
hold on;
semilogy(snr_DB, theoryBerAWGN, 'b-', 'LineWidth', 2);
legend('AWGN Simulated', 'AWGN Theoretical');
axis([0 10 10^-5 0.5]);
xlabel('SNR (dB)');
ylabel('BER');
grid on;











2. BER Performance for BPSK Signal over Rayleigh Fading Channel

clear all;
% Number of information bits
m = 10^5;
% Range of SNR values
snr_dB = 0:1:20;

for j = 1:length(snr_dB)
    n_err = 0;
    n_bits = 0;
    while n_err < 100
        % Generate sequence of binary bits
        inf_bits = round(rand(1, m));
        % BPSK modulator
        x = 2 * (inf_bits - 0.5);
        % Noise variance
        N0 = 1 / 10^(snr_dB(j) / 10);
        % Rayleigh channel fading
        h = 1/sqrt(2) * (randn(1, length(x)) + 1i * randn(1, length(x)));
        % Send over Gaussian Link to the receiver
        y = h .* x + sqrt(N0/2) * (randn(1, length(x)) + 1i * randn(1, length(x)));
        % Decision metric (Coherent detection)
        y = real(y ./ h);
        % Decision making at the Receiver
        est_bits = y > 0;
        % Calculate Bit Errors
        diff = inf_bits - est_bits;
        n_err = n_err + sum(abs(diff));
        n_bits = n_bits + length(inf_bits);
    end
    % Calculate Bit Error Rate
    BER(j) = n_err / n_bits;
end

% Rayleigh Theoretical BER
snr = 10.^(snr_dB / 10);
theoryBer = 0.5 .* (1 - sqrt(snr ./ (snr + 1)));
% AWGN Theoretical BER
theoryBerAWGN = 0.5 * erfc(sqrt(snr));

% Plot results
semilogy(snr_dB, theoryBer, 'r-', 'LineWidth', 2); % Rayleigh theoretical
hold on;
semilogy(snr_dB, BER, 'o', 'LineWidth', 2);        % Rayleigh simulated
semilogy(snr_dB, theoryBerAWGN, 'b-', 'LineWidth', 2); % AWGN theoretical
legend('Rayleigh Theoretical', 'Rayleigh Simulated', 'AWGN Theoretical');
axis([0 20 10^-5 1]); % Adjust axis for visibility
xlabel('SNR (dB)');
ylabel('BER');
grid on;



3.
a.) Log-Distance path loss indoor propagation model with shadowing
clc;
clear all;
close all;

% User input for the reference distance
d0 = input('Enter the reference distance (in meters): ');
d = 1000:1000:20000;  % Distance array from 1000 to 20000 in steps of 1000

% Given parameters
n = [2.2, 1.8, 3.0, 2.4, 2.6, 2.0, 2.1, 1.8, 1.6, 3.0, 3.1, 3.3];
f = [914, 914, 1500, 900, 1900, 1300, 4000, 1300, 1300, 900, 4000, 1300];
sigma = [8.7, 5.2, 7.0, 9.6, 14.1, 3.0, 7.0, 6.0, 5.8, 7.0, 9.7, 6.8];

% Preallocate for path loss arrays
PL = zeros(12, length(d));

% Main loop for each scenario
for i = 1:12
    lambda = 3e8 / (f(i) * 10^6);
    PL_d0 = -10 * log10((lambda^2) ./ ((4 * pi). ^2 .* d. ^2)); %corrected
    X = sigma(i) * randn(1);  % Shadowing component for each scenario

    disp(randn(size(PL_d0(i))));

    % Calculate path loss for each distance
    for j = 1:length(d)
        PL(i, j) = PL_d0 + 10 * n(i) * log10(d(j) / d0) + X;
    end
end

% Plot the results
plot(d, PL);
legend('Retail store', 'Grocery store', 'Office hard partition', 'Office soft partition', ...
    'Textile/Chemical', 'Paper/Cereals', 'Metalworking', 'Indoor street', ...
    'Textile/Chemical', 'Metalworking', 'Scenario 11', 'Scenario 12');
xlabel('Distance (m)');
ylabel('Path Loss (dB)');
title('LOG-DISTANCE PATH LOSS INDOOR PROPAGATION MODEL (WITH SHADOWING EFFECT)');
grid on;


b.) Log-Distance path loss indoor propagation model
clc;
clear all;
close all;

% Input reference distance
d0 = input('Enter the reference distance (in meters): ');

% Distance vector
d = 1000:1000:20000;

% Parameters for different environments
n = [2.2 1.8 3.0 2.4 2.6 2.0 2.1 1.8 1.6 3.0 2.1 3.3]; % Path loss exponent
f = [914 914 1500 900 1900 1300 4000 1300 1300 900 4000 1300]; % Frequency in MHz

% No shadowing factor
X = 0;

% Pre-allocate arrays
lambda = zeros(1, 12);
PL_d0 = zeros(1, 12);
PL = zeros(12, length(d));

% Compute path loss at reference distance (PL_d0)
for i = 1:12
    lambda(i) = 3e8 / (f(i) * 10^6); % Wavelength
    PL_d0(i) = -10 * log10((lambda(i)^2) / ((4 * pi * d0)^2)) + X; % Path loss at reference distance
end

disp('PL_d0->d (dB) =');
disp(PL_d0);

% Compute path loss for each distance
for i = 1:12
    for j = 1:length(d)
        PL(i, j) = PL_d0(i) + 10 * n(i) * log10(d(j) / d0);
    end
end

% Plotting Distance vs. Path Loss
plot(d, PL);
legend({'Retail Store', 'Grocery Store', 'Office Hard Partition', ...
    'Office Soft Partition', 'Textile/Chemical', 'Paper/Cereals', ...
    'Metalworking', 'Indoor Street', 'Textile/Chemical (2)', ...
    'Metalworking (2)', 'Environment 11', 'Environment 12'}, 'Location', 'Best');
xlabel('Distance (m)');
ylabel('Path Loss (dB)');
title('Log-Distance Path Loss Indoor Propagation Model (No Shadowing Effect)');
grid on;









5. Bit error rate analysis of digital communication receivers with Maximal Ratio Combining (MRC) receive diversity in frequency-flat and slowly varying fading channel.

clc;
clear all;
close all;

% Initialization
N = 5; % Number of trials
m = 10^6; % Number of bits in each trial
ip = rand(1, m) > 0.5; % Generated bits
BPSK = 2 * ip - 1; % BPSK symbols
snr_dB = 0:1:15; % SNR values in dB
snr = 10.^(snr_dB / 10); % SNR in linear scale
L = 2; % Number of diversity branches

% Theoretical BER for MRC combiner with 2 diversity branches
p_R_MRC = 0.5 - 0.5 * (1 + 1 ./ snr).^(-0.5);
ber_MRC_ana = p_R_MRC.^2 .* (1 + 2 * (1 - p_R_MRC));

% Simulation for MRC 1x2 system
n_err = zeros(1, length(snr_dB)); % Bit error counter

for p = 1:N
    for q = 1:length(snr_dB)
        % Generate white noise samples
        noise = 1 / sqrt(2) * (randn(L, m) + 1j * randn(L, m));
        % Generate channel coefficients
        h = 1 / sqrt(2) * (randn(L, m) + 1j * randn(L, m));
        symbol = kron(ones(L, 1), BPSK); % Array of symbols
        rec_vector = h .* symbol + 10^(-snr_dB(q) / 20) * noise; % Received symbols

        % Decision metric
        dec_metric = sum(conj(h) .* rec_vector, 1) ./ sum(h .* conj(h), 1);
        ip_hat = real(dec_metric) > 0; % Estimated symbols
        n_err(q) = n_err(q) + sum(abs(ip - ip_hat)); % Count errors
    end
end

% Simulated BER
ber_MRC_sim = n_err / (N * m);

%display output
disp('ber_MRC_ana = ');
disp(ber_MRC_ana);
disp('ber_MRC_sim = ');
disp(ber_MRC_sim);

% Plot results
semilogy(snr_dB, ber_MRC_ana, '-r*', 'LineWidth', 2);
hold on;
semilogy(snr_dB, ber_MRC_sim, 'ob', 'LineWidth', 2);
legend('ber MRC ana', 'ber MRC sim'); % Corrected legend order
xlabel('SNR (dB)');
ylabel('BER');
title('Bit Error Rate with MRC Diversity in Rayleigh Fading');
grid on;















clc;
close all;
clear all;
% Number of information bits
m= 10^3;
%Range of SNR values
snr_dB = [0:1:20];
snr = 10.^(snr_dB/10);
for j=1:1:length(snr_dB)
    n_err = 0;
    n_bits = 0;
    while n_err < 100
        inf_bits=round(rand(1,m));
        % BPSK modulator
        x=-2*(inf_bits-0.5);
        % Noise variance
        N0=1/10^(snr_dB(j)/10);
        n1 = sqrt(N0/2)*abs((randn(1,length(x))+ 1i*randn(1,length(x)))); %noise for the first
        n2 = sqrt(N0/2)*abs((randn(1,length(x))+ 1i*randn(1,length(x)))); %noise for the first
        h1 = sqrt(0.5)*abs((randn(1,length(x))+ 1i*randn(1,length(x)))); %rayleigh amplitude 1
        h2 = sqrt(0.5)*abs((randn(1,length(x))+ 1i*randn(1,length(x)))); %rayleigh amplitude 1  
        %Equal Gain combining
        y1 = h1.*x+n1; % Signal 1
        y2 = h2.*x+n2; % Signal 2
        y_equal = 0.5*(y1+y2);
        % Decision making at the Receiver
        est_bits=y_equal < 0;
        % Calculate Bit Errors
        diff=inf_bits-est_bits;
        n_err=n_err+sum(abs(diff));
        n_bits=n_bits+length(inf_bits);
    end
    % Calculate Bit Error Rate
    BER(j)=n_err/n_bits;
end
theoryBer=0.5.*(1-sqrt(snr./(snr+1))); % Rayleigh Theoretical BER
semilogy(snr_dB,BER,'or-','LineWidth',2);
hold on;
semilogy(snr_dB,theoryBer,'blad-','LineWidth',2);
hold on;
legend('Rayleigh EGC Simulated', 'Rayleigh Theoretical');
axis([0 20 10^-5 1]);
xlabel('SNR (dB)');
ylabel('BER');
grid on;
